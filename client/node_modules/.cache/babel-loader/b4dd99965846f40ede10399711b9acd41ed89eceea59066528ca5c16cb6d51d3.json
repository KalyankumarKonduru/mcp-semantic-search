{"ast":null,"code":"import axios from 'axios';\n\n// Create axios instance with base URL\nconst api = axios.create({\n  baseURL: process.env.REACT_APP_API_URL || 'http://localhost:3000/api/v1',\n  timeout: 30000\n});\n\n// Add API key to all requests if available\napi.interceptors.request.use(config => {\n  const apiKey = localStorage.getItem('apiKey');\n  if (apiKey) {\n    config.headers['x-api-key'] = apiKey;\n  }\n  return config;\n});\n\n// Document management API\nexport const documentApi = {\n  // List documents with pagination\n  listDocuments: (page = 1, limit = 20, filter = '') => api.get('/documents', {\n    params: {\n      page,\n      limit,\n      filter\n    }\n  }),\n  // Get a single document\n  getDocument: id => api.get(`/documents/${id}`),\n  // Create a new document\n  createDocument: (text, metadata) => api.post('/documents', {\n    text,\n    metadata\n  }),\n  // Upload a document file\n  uploadDocument: async (file, metadata) => {\n    const text = await file.text();\n    return api.post('/documents', {\n      text,\n      metadata: {\n        ...metadata,\n        filename: file.name,\n        fileType: file.type,\n        fileSize: file.size\n      }\n    });\n  },\n  // Delete a document\n  deleteDocument: id => api.delete(`/documents/${id}`)\n};\n\n// Search API\nexport const searchApi = {\n  // Semantic search\n  semanticSearch: (query, limit = 5, filters = null) => api.post('/search', {\n    query,\n    limit,\n    filters\n  }),\n  // Hybrid search (semantic + keyword)\n  hybridSearch: (query, keywords, limit = 5, filters = null) => api.post('/search/hybrid', {\n    query,\n    keywords,\n    limit,\n    filters\n  })\n};\n\n// MCP API\nexport const mcpApi = {\n  // Get context for a query\n  getContext: (query, limit = 5, metadata_filters = null) => api.post('/mcp/context', {\n    query,\n    limit,\n    metadata_filters\n  })\n};","map":{"version":3,"names":["axios","api","create","baseURL","process","env","REACT_APP_API_URL","timeout","interceptors","request","use","config","apiKey","localStorage","getItem","headers","documentApi","listDocuments","page","limit","filter","get","params","getDocument","id","createDocument","text","metadata","post","uploadDocument","file","filename","name","fileType","type","fileSize","size","deleteDocument","delete","searchApi","semanticSearch","query","filters","hybridSearch","keywords","mcpApi","getContext","metadata_filters"],"sources":["/Users/kalyankumarkonduru/Desktop/mcp-semantic-search/client/src/api/index.js"],"sourcesContent":["import axios from 'axios';\n\n// Create axios instance with base URL\nconst api = axios.create({\n  baseURL: process.env.REACT_APP_API_URL || 'http://localhost:3000/api/v1',\n  timeout: 30000\n});\n\n// Add API key to all requests if available\napi.interceptors.request.use(config => {\n  const apiKey = localStorage.getItem('apiKey');\n  if (apiKey) {\n    config.headers['x-api-key'] = apiKey;\n  }\n  return config;\n});\n\n// Document management API\nexport const documentApi = {\n  // List documents with pagination\n  listDocuments: (page = 1, limit = 20, filter = '') => \n    api.get('/documents', { params: { page, limit, filter } }),\n  \n  // Get a single document\n  getDocument: (id) => \n    api.get(`/documents/${id}`),\n  \n  // Create a new document\n  createDocument: (text, metadata) => \n    api.post('/documents', { text, metadata }),\n  \n  // Upload a document file\n  uploadDocument: async (file, metadata) => {\n    const text = await file.text();\n    return api.post('/documents', { \n      text, \n      metadata: { \n        ...metadata, \n        filename: file.name,\n        fileType: file.type,\n        fileSize: file.size\n      } \n    });\n  },\n  \n  // Delete a document\n  deleteDocument: (id) => \n    api.delete(`/documents/${id}`)\n};\n\n// Search API\nexport const searchApi = {\n  // Semantic search\n  semanticSearch: (query, limit = 5, filters = null) => \n    api.post('/search', { query, limit, filters }),\n  \n  // Hybrid search (semantic + keyword)\n  hybridSearch: (query, keywords, limit = 5, filters = null) => \n    api.post('/search/hybrid', { query, keywords, limit, filters })\n};\n\n// MCP API\nexport const mcpApi = {\n  // Get context for a query\n  getContext: (query, limit = 5, metadata_filters = null) => \n    api.post('/mcp/context', { query, limit, metadata_filters })\n};"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;;AAEzB;AACA,MAAMC,GAAG,GAAGD,KAAK,CAACE,MAAM,CAAC;EACvBC,OAAO,EAAEC,OAAO,CAACC,GAAG,CAACC,iBAAiB,IAAI,8BAA8B;EACxEC,OAAO,EAAE;AACX,CAAC,CAAC;;AAEF;AACAN,GAAG,CAACO,YAAY,CAACC,OAAO,CAACC,GAAG,CAACC,MAAM,IAAI;EACrC,MAAMC,MAAM,GAAGC,YAAY,CAACC,OAAO,CAAC,QAAQ,CAAC;EAC7C,IAAIF,MAAM,EAAE;IACVD,MAAM,CAACI,OAAO,CAAC,WAAW,CAAC,GAAGH,MAAM;EACtC;EACA,OAAOD,MAAM;AACf,CAAC,CAAC;;AAEF;AACA,OAAO,MAAMK,WAAW,GAAG;EACzB;EACAC,aAAa,EAAEA,CAACC,IAAI,GAAG,CAAC,EAAEC,KAAK,GAAG,EAAE,EAAEC,MAAM,GAAG,EAAE,KAC/CnB,GAAG,CAACoB,GAAG,CAAC,YAAY,EAAE;IAAEC,MAAM,EAAE;MAAEJ,IAAI;MAAEC,KAAK;MAAEC;IAAO;EAAE,CAAC,CAAC;EAE5D;EACAG,WAAW,EAAGC,EAAE,IACdvB,GAAG,CAACoB,GAAG,CAAC,cAAcG,EAAE,EAAE,CAAC;EAE7B;EACAC,cAAc,EAAEA,CAACC,IAAI,EAAEC,QAAQ,KAC7B1B,GAAG,CAAC2B,IAAI,CAAC,YAAY,EAAE;IAAEF,IAAI;IAAEC;EAAS,CAAC,CAAC;EAE5C;EACAE,cAAc,EAAE,MAAAA,CAAOC,IAAI,EAAEH,QAAQ,KAAK;IACxC,MAAMD,IAAI,GAAG,MAAMI,IAAI,CAACJ,IAAI,CAAC,CAAC;IAC9B,OAAOzB,GAAG,CAAC2B,IAAI,CAAC,YAAY,EAAE;MAC5BF,IAAI;MACJC,QAAQ,EAAE;QACR,GAAGA,QAAQ;QACXI,QAAQ,EAAED,IAAI,CAACE,IAAI;QACnBC,QAAQ,EAAEH,IAAI,CAACI,IAAI;QACnBC,QAAQ,EAAEL,IAAI,CAACM;MACjB;IACF,CAAC,CAAC;EACJ,CAAC;EAED;EACAC,cAAc,EAAGb,EAAE,IACjBvB,GAAG,CAACqC,MAAM,CAAC,cAAcd,EAAE,EAAE;AACjC,CAAC;;AAED;AACA,OAAO,MAAMe,SAAS,GAAG;EACvB;EACAC,cAAc,EAAEA,CAACC,KAAK,EAAEtB,KAAK,GAAG,CAAC,EAAEuB,OAAO,GAAG,IAAI,KAC/CzC,GAAG,CAAC2B,IAAI,CAAC,SAAS,EAAE;IAAEa,KAAK;IAAEtB,KAAK;IAAEuB;EAAQ,CAAC,CAAC;EAEhD;EACAC,YAAY,EAAEA,CAACF,KAAK,EAAEG,QAAQ,EAAEzB,KAAK,GAAG,CAAC,EAAEuB,OAAO,GAAG,IAAI,KACvDzC,GAAG,CAAC2B,IAAI,CAAC,gBAAgB,EAAE;IAAEa,KAAK;IAAEG,QAAQ;IAAEzB,KAAK;IAAEuB;EAAQ,CAAC;AAClE,CAAC;;AAED;AACA,OAAO,MAAMG,MAAM,GAAG;EACpB;EACAC,UAAU,EAAEA,CAACL,KAAK,EAAEtB,KAAK,GAAG,CAAC,EAAE4B,gBAAgB,GAAG,IAAI,KACpD9C,GAAG,CAAC2B,IAAI,CAAC,cAAc,EAAE;IAAEa,KAAK;IAAEtB,KAAK;IAAE4B;EAAiB,CAAC;AAC/D,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}